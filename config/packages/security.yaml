security:
    access_decision_manager:
        strategy: affirmative  #Strategy defined for voter, use to granted User access for certains actions

    encoders:
        App\Entity\Users\User: bcrypt

    providers:
        users: #name give to provider
            entity:
                class: 'App\Entity\Users\User'
                property: 'username'

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            anonymous: true
            pattern: ^/

            form_login:
                check_path: security_login
                login_path: security_login
                csrf_token_generator: security.csrf.token_manager
                failure_path: security_login

            guard:
                authenticators:
                    - App\Security\LoginFormAuthenticator

            remember_me:
                secret:   '%kernel.secret%'
                lifetime: 604800 # 1 week in seconds
                path:     /

            logout:
                path: security_logout
                target: home_page

        # activate different ways to authenticate
        # https://symfony.com/doc/current/security.html#firewalls-authentication

        # https://symfony.com/doc/current/security/impersonating_user.html
        # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/login$, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }

    # Define the role hierarchy setting to display datas allowed for ROLE_USER to ROLE_ADMIN
    role_hierarchy:
        ROLE_USER:  ROLE_USER
        ROLE_OWNER: ROLE_USER
        ROLE_ADMIN: ROLE_OWNER